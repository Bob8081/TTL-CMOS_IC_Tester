;#include <mega32a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <io.h>
;#include <stdint.h>
;#include <delay.h>
;#include <string.h>
;#include <glcd.h>
;#include <font5x7.h>
;#include "IC_Configs.h"

	.DSEG
;#include <stdio.h>
;
;
;
;
;// Pin Definitions
;#define LED_PASS    PORTC0
;#define LED_FAIL    PORTC1
;#define TEST_BUTTON_PIN PINB3
;#define GLCD_LCD_WIDTH 84
;#define LINES_DY 9
;#define F_CPU 11059200UL
;
;#define NUM_ICs (sizeof(ICs) / sizeof(IC_Config))
;
;
;
;// Function prototypes
;void initialize_ports(void);
;void power_ic(IC_Package package_type);
;void display_result(unsigned char result);
;void glcd_drawCenteredStr(const char *str, uint8_t y, uint8_t dx);
;unsigned char is_button_pressed();
;void clear_LEDs();
;void clear_ports();
;unsigned char reverseBits(unsigned char num);
;
;
;
;void main(void) {
; 0000 0026 void main(void) {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 0027     unsigned char result = 0;
; 0000 0028 	unsigned char state = 1;
; 0000 0029 	unsigned char current_ic = 0;
; 0000 002A 
; 0000 002B 
; 0000 002C 
; 0000 002D 	// Initialize Nokia5110 Display
; 0000 002E 	GLCDINIT_t glcd_init_data;
; 0000 002F     glcd_init_data.font = font5x7;
;PCODE: $0000000E VOL: 0
;	result -> R17
;	state -> R16
;	current_ic -> R19
;	glcd_init_data -> Y+0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0030     glcd_init_data.temp_coef = PCD8544_DEFAULT_TEMP_COEF;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0031     glcd_init_data.bias = PCD8544_DEFAULT_BIAS;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0032     glcd_init_data.vlcd = PCD8544_DEFAULT_VLCD;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0033     glcd_init(&glcd_init_data);
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0034 
; 0000 0035 	// Clear the display
; 0000 0036     glcd_clear();
;PCODE: $00000025 VOL: 0
; 0000 0037 
; 0000 0038     // Initialize ports
; 0000 0039     initialize_ports();
;PCODE: $00000026 VOL: 0
; 0000 003A 
; 0000 003B 
; 0000 003C     // Main loop
; 0000 003D     while (1) {
;PCODE: $00000027 VOL: 0
; 0000 003E         switch (state) {
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 003F             case 1: // Idle State
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0040 				clear_LEDs();
;PCODE: $0000002C VOL: 0
; 0000 0041 
; 0000 0042                 // Display message
; 0000 0043                 glcd_drawCenteredStr("Press to test", LINES_DY * 2, 1);
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0044 
; 0000 0045                 // Wait for button press
; 0000 0046                 if (is_button_pressed()) {
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0047                     state = 2; // Move to Testing State
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0048 
; 0000 0049                     while (is_button_pressed()); // Wait for button release
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 004A                 }
; 0000 004B                 break;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 004C 
; 0000 004D             case 2: // Testing State
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 004E 
; 0000 004F 				glcd_clear();
;PCODE: $00000044 VOL: 0
; 0000 0050 				glcd_drawCenteredStr("Testing...", LINES_DY * 2, 1);
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0051 				while (current_ic < NUM_ICs) {
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0052 					// Run the test for the current IC
; 0000 0053 					result = ICs[current_ic].test_function();
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0054 					clear_ports();
;PCODE: $00000058 VOL: 0
; 0000 0055 
; 0000 0056 					if (result) {
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0057 						state = 3;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0058 					 break;
;PCODE: $0000005D VOL: 0
; 0000 0059 					}
; 0000 005A 
; 0000 005B                     // Move to the next IC or Result State
; 0000 005C                     current_ic++;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 005D                 }
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 005E 
; 0000 005F 				display_result(result);
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0060                 state = 3; // All tests completed, move to Result State
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0061 
; 0000 0062                 break;
;PCODE: $00000067 VOL: 0
; 0000 0063             case 3: // Result State
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0064 
; 0000 0065 				// Wait for button press to move to Idle State
; 0000 0066                 if (is_button_pressed()) {
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 0067 					while (is_button_pressed()); // Wait for button release
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 0068 					glcd_clear();
;PCODE: $00000074 VOL: 0
; 0000 0069                     current_ic = 0;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 006A                     state = 1; // Move to Result State
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 006B 
; 0000 006C                 }
; 0000 006D                 break;
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 006E         }
;PCODE: $0000007B VOL: 0
; 0000 006F     }
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 0070 }
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0

	.DSEG
_0xB:
	.BYTE 0x19
;
;void initialize_ports(void) {
; 0000 0072 void initialize_ports(void) {

	.CSEG
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 0073     // Configure TEST_BUTTON_PIN as input with pull-up
; 0000 0074     DDRB &= ~(1 << TEST_BUTTON_PIN);
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 0075     PORTB |= (1 << TEST_BUTTON_PIN);
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 0076 
; 0000 0077     // Configure LED pins
; 0000 0078     DDRC |= (1 << LED_PASS) | (1 << LED_FAIL);
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 0079     PORTC &= ~((1 << LED_PASS) | (1 << LED_FAIL));
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 007A 
; 0000 007B }
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;
;void power_ic(IC_Package package_type) {
; 0000 007D void power_ic(IC_Package package_type) {
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 007E     IC_Package package = package_type;
; 0000 007F 
; 0000 0080 
; 0000 0081 	// Reset power pins
; 0000 0082 	DDRA |= (1 << PORTA0);
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;	package_type -> Y+1
;	package -> R17
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 0083     PORTA &= ~(1 << PORTA0);
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 0084     if (package == DIP14) {
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 0085 		DDRD |= (1 << PORTD6);
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 0086         PORTD &= ~(1 << PORTD6);
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 0087     } else if (package == DIP16) {
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 0088 		DDRD |= (1 << PORTD7);
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 0089         PORTD &= ~(1 << PORTD7);
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 008A     }
; 0000 008B     delay_ms(5);
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 008C 
; 0000 008D     // Power the IC
; 0000 008E     PORTA |= (1 << PORTA0);
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 008F     if (package == DIP14) {
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 0090         PORTD &= ~(1 << PORTD6);
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 0091     } else if (package == DIP16) {
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 0092         PORTD &= ~(1 << PORTD7);
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 0093     }
; 0000 0094 }
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;
;unsigned char test_7408(void) {
; 0000 0096 unsigned char test_7408(void) {
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 0097     unsigned char i;
; 0000 0098     unsigned char input1, input2; // Inputs for gates
; 0000 0099     unsigned char output1, output2, output3, output4;
; 0000 009A 
; 0000 009B 
; 0000 009C     // Configure 7408 input pins as outputs (from MCU)
; 0000 009D     DDRD |= IC_7408.input_mask_PD;
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;	i -> R17
;	input1 -> R16
;	input2 -> R19
;	output1 -> R18
;	output2 -> R21
;	output3 -> R20
;	output4 -> Y+6
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 009E     DDRA |= IC_7408.input_mask_PA;
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 009F 
; 0000 00A0     // Configure 7408 output pins as inputs (from MCU)
; 0000 00A1     DDRD &= ~IC_7408.output_mask_PD;
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 00A2     DDRA &= ~IC_7408.output_mask_PA;
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 00A3 
; 0000 00A4     // Set initial pin states to low
; 0000 00A5     PORTD &= ~IC_7408.input_mask_PD;
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 00A6     PORTA &= ~IC_7408.input_mask_PA;
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 00A7 
; 0000 00A8     power_ic(IC_7408.package_type);
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 00A9 
; 0000 00AA     for (i = 0; i < 4; i++) {
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 00AB         input1 = (i & 0x01); // LSB of inputs
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 00AC         input2 = (i & 0x02) >> 1; // MSB of inputs
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 00AD 
; 0000 00AE         PORTD = (PORTD & ~IC_7408.input_mask_PD) | (input1 << PORTD0) | (input2 << PORTD1) | (input1 << PORTD3) | (input ...
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 00AF         PORTA = (PORTA & ~IC_7408.input_mask_PA) | (input1 << PORTA1) | (input2 << PORTA2) | (input1 << PORTA4) | (input ...
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 00B0 
; 0000 00B1         delay_ms(20); // Allow time for IC to process
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 00B2 
; 0000 00B3         // Read outputs for all gates
; 0000 00B4         output1 = (PIND & (1 << PORTD2)) >> PORTD2; // Gate 1 output
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0000 00B5         output2 = (PIND & (1 << PORTD5)) >> PORTD5; // Gate 2 output
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0000 00B6         output3 = (PINA & (1 << PORTA3)) >> PORTA3; // Gate 3 output
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0000 00B7         output4 = (PINA & (1 << PORTA6)) >> PORTA6; // Gate 4 output
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0000 00B8 
; 0000 00B9         delay_ms(10);
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0000 00BA 
; 0000 00BB         if (output1 != (input1 & input2)) return 0; // Gate 1 check
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0000 00BC         if (output2 != (input1 & input2)) return 0; // Gate 2 check
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 0000 00BD         if (output3 != (input1 & input2)) return 0; // Gate 3 check
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
; 0000 00BE         if (output4 != (input1 & input2)) return 0; // Gate 4 check
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0000 00BF     }
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0000 00C0 
; 0000 00C1     glcd_clear();
;PCODE: $0000016F VOL: 0
; 0000 00C2     glcd_drawCenteredStr("IC is 7408", LINES_DY * 2, 1);
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
; 0000 00C3     glcd_drawCenteredStr("DIP14 - TTL", LINES_DY * 3, 1);
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0000 00C4     return 1; // Test passed
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 0000 00C5 }
;PCODE: $00000182 VOL: 0

	.DSEG
_0x28:
	.BYTE 0x17
;
;unsigned char test_4066(void) {
; 0000 00C7 unsigned char test_4066(void) {

	.CSEG
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
; 0000 00C8     unsigned char i;
; 0000 00C9     unsigned char control, input, output1, output2, output3, output4;
; 0000 00CA 
; 0000 00CB     // Configure control and input pins as outputs (from MCU)
; 0000 00CC     DDRD |= IC_4066.input_mask_PD;
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;	i -> R17
;	control -> R16
;	input -> R19
;	output1 -> R18
;	output2 -> R21
;	output3 -> R20
;	output4 -> Y+6
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
; 0000 00CD     DDRA |= IC_4066.input_mask_PA;
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
; 0000 00CE 
; 0000 00CF     // Configure output pins as inputs (from MCU)
; 0000 00D0     DDRD &= ~IC_4066.output_mask_PD;
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
; 0000 00D1 	DDRA &= ~IC_4066.output_mask_PA;
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
; 0000 00D2 
; 0000 00D3     // Set initial pin states to low
; 0000 00D4     PORTD &= ~IC_4066.input_mask_PD;
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
; 0000 00D5     PORTA &= ~IC_4066.input_mask_PA;
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
; 0000 00D6 
; 0000 00D7     power_ic(IC_4066.package_type);
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
; 0000 00D8 
; 0000 00D9     // Testing loop for all switch combinations
; 0000 00DA     for (i = 0; i < 2; i++) {
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
; 0000 00DB         control = 1; // Set control to 0 or 1
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
; 0000 00DC         input = i;   // Set input to 0 or 1
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
; 0000 00DD 
; 0000 00DE         // Set control and inputs
; 0000 00DF         PORTD = (PORTD & ~IC_4066.input_mask_PD) | (input << PORTD0) | (input << PORTD2) | (control << PORTD4) | (contro ...
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
; 0000 00E0         PORTA = (PORTA & ~IC_4066.input_mask_PA) | (control << PORTA1) | (control << PORTA2) | (input << PORTA4) | (inpu ...
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
; 0000 00E1 
; 0000 00E2         delay_ms(20); // Allow time for IC to process
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
; 0000 00E3 
; 0000 00E4         // Read outputs for all switches
; 0000 00E5         output1 = ((PIND & (1 << PORTD1)) >> PORTD1);
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
; 0000 00E6         output2 = ((PIND & (1 << PORTD3)) >> PORTD3);
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
; 0000 00E7         output3 = ((PINA & (1 << PORTA3)) >> PORTA3);
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
; 0000 00E8         output4 = ((PINA & (1 << PORTA5)) >> PORTA5);
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
; 0000 00E9 
; 0000 00EA 
; 0000 00EB 
; 0000 00EC         delay_ms(10);
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
; 0000 00ED 
; 0000 00EE         // Verify output matches the input for all switches
; 0000 00EF         if (output1 != input) return 0;
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
; 0000 00F0 		if (output2 != input) return 0;
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
; 0000 00F1 		if (output3 != input) return 0;
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
; 0000 00F2 		if (output4 != input) return 0;
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
; 0000 00F3     }
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
; 0000 00F4 
; 0000 00F5     glcd_clear();
;PCODE: $0000022A VOL: 0
; 0000 00F6     glcd_drawCenteredStr("IC is 4066", LINES_DY * 2, 1);
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
; 0000 00F7     glcd_drawCenteredStr("DIP14 - CMOS", LINES_DY * 3, 1);
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
; 0000 00F8     return 1; // Test passed
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
; 0000 00F9 }
;PCODE: $0000023D VOL: 0

	.DSEG
_0x30:
	.BYTE 0x18
;
;unsigned char test_7445(void) {
; 0000 00FB unsigned char test_7445(void) {

	.CSEG
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
; 0000 00FC     unsigned char input, expected_PA, expected_PD, i;
; 0000 00FD     unsigned char outputs_PD, outputs_PA;
; 0000 00FE 
; 0000 00FF     // Configure input pins as outputs (from MCU)
; 0000 0100     DDRD |= IC_7445.input_mask_PD;
;PCODE: $00000240 VOL: 0
;	input -> R17
;	expected_PA -> R16
;	expected_PD -> R19
;	i -> R18
;	outputs_PD -> R21
;	outputs_PA -> R20
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
; 0000 0101     DDRA |= IC_7445.input_mask_PA;
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
; 0000 0102 
; 0000 0103     // Configure output pins as inputs (from MCU)
; 0000 0104     DDRD &= ~IC_7445.output_mask_PD;
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
; 0000 0105     DDRA &= ~IC_7445.output_mask_PA;
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
; 0000 0106 
; 0000 0107     // Set initial input states to low
; 0000 0108     PORTD &= ~IC_7445.input_mask_PD;
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
; 0000 0109     PORTA &= ~IC_7445.input_mask_PA;
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
; 0000 010A 
; 0000 010B     power_ic(IC_7445.package_type);
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
; 0000 010C 
; 0000 010D     // Testing loop for all BCD inputs
; 0000 010E     for (i = 0; i < 10; i++) {
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
; 0000 010F         // Set inputs (BCD value)
; 0000 0110         input = i;
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
; 0000 0111         PORTA = (PORTA & ~IC_7445.input_mask_PA) | ((input & 0x0F) << PORTA1); // Set D, C, B, A
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
; 0000 0112 
; 0000 0113         delay_ms(20); // Allow time for IC to process
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
; 0000 0114 
; 0000 0115         // Read outputs
; 0000 0116         outputs_PD = (PIND & IC_7445.output_mask_PD); // Outputs 0-6
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
; 0000 0117         outputs_PA = (PINA & IC_7445.output_mask_PA); // Outputs 7-9
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
; 0000 0118 
; 0000 0119 		expected_PD = 0x7F; // All high initially
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
; 0000 011A         expected_PA = 0xE0;
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
; 0000 011B 
; 0000 011C         delay_ms(10);
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
; 0000 011D 
; 0000 011E         if (input < 7) {
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
; 0000 011F             expected_PD &= ~(1 << input); // Set the correct bit low
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
; 0000 0120         } else {
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
; 0000 0121             expected_PA &= ~(1 << (14 - input));
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
; 0000 0122         }
;PCODE: $000002AB VOL: 0
; 0000 0123 
; 0000 0124 		 if (outputs_PD != expected_PD || outputs_PA != expected_PA) {
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
; 0000 0125             return 0; // Test failed
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
; 0000 0126         }
; 0000 0127     }
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
; 0000 0128 
; 0000 0129     glcd_clear();
;PCODE: $000002BE VOL: 0
; 0000 012A     glcd_drawCenteredStr("IC is 7445", LINES_DY * 2, 1);
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
; 0000 012B     glcd_drawCenteredStr("DIP16 - TTL", LINES_DY * 3, 1);
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
; 0000 012C     return 1; // Test passed
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
; 0000 012D }
;PCODE: $000002D1 VOL: 0

	.DSEG
_0x39:
	.BYTE 0x17
;
;unsigned char test_4532(void) {
; 0000 012F unsigned char test_4532(void) {

	.CSEG
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
; 0000 0130     unsigned char input;
; 0000 0131     unsigned char outputs_PD;
; 0000 0132     unsigned char outputs_PA;
; 0000 0133     unsigned char expected_output;
; 0000 0134     unsigned char q0;
; 0000 0135     unsigned char q2;
; 0000 0136     unsigned char q1;
; 0000 0137     unsigned char combined_output;
; 0000 0138 
; 0000 0139     // Configure input pins as outputs (from MCU)
; 0000 013A     DDRD |= IC_4532.input_mask_PD;
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
;	input -> R17
;	outputs_PD -> R16
;	outputs_PA -> R19
;	expected_output -> R18
;	q0 -> R21
;	q2 -> R20
;	q1 -> Y+7
;	combined_output -> Y+6
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
; 0000 013B     DDRA |= IC_4532.input_mask_PA;
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
; 0000 013C 
; 0000 013D     // Configure output pins as inputs (from MCU)
; 0000 013E     DDRD &= ~IC_4532.output_mask_PD;
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
; 0000 013F     DDRA &= ~IC_4532.output_mask_PA;
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
; 0000 0140 
; 0000 0141     // Set initial input states to low (important for priority encoder)
; 0000 0142     PORTD &= ~IC_4532.input_mask_PD;
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
; 0000 0143     PORTA &= ~IC_4532.input_mask_PA;
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
;PCODE: $000002FD VOL: 0
; 0000 0144 
; 0000 0145     // Set EN_IN high to enable the encoder
; 0000 0146     PORTD |= (1 << PORTD4); // Assuming PORTD4 is EN_IN
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
; 0000 0147 
; 0000 0148     power_ic(IC_4532.package_type);
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
; 0000 0149 
; 0000 014A     // Test each input individually, starting with the highest priority
; 0000 014B     for (input = 7; input > 0; input--) {
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 0
; 0000 014C 
; 0000 014D 		PORTD &= ~((1 << PORTD0) | (1 << PORTD1) | (1 << PORTD2) | (1 << PORTD3));
;PCODE: $0000030C VOL: 0
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
; 0000 014E 		PORTA &= ~((1 << PORTA3) | (1 << PORTA4) | (1 << PORTA5) | (1 << PORTA6));
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
; 0000 014F 
; 0000 0150         // Set the current input high
; 0000 0151         if (input < 4) {
;PCODE: $00000312 VOL: 0
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
; 0000 0152             PORTA |= (1 << (PORTA3 + (3 - input))); // Set inputs 0-3
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
;PCODE: $0000031A VOL: 0
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
;PCODE: $0000031D VOL: 0
; 0000 0153         } else {
;PCODE: $0000031E VOL: 0
;PCODE: $0000031F VOL: 0
; 0000 0154             PORTD |= (1 << (PORTD0 + (input - 4))); // Set inputs 4-7
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
;PCODE: $00000325 VOL: 0
;PCODE: $00000326 VOL: 0
;PCODE: $00000327 VOL: 0
; 0000 0155         }
;PCODE: $00000328 VOL: 0
; 0000 0156 
; 0000 0157         delay_ms(20);
;PCODE: $00000329 VOL: 0
;PCODE: $0000032A VOL: 0
;PCODE: $0000032B VOL: 0
; 0000 0158 
; 0000 0159         // Read outputs
; 0000 015A         outputs_PD = (PIND & IC_4532.output_mask_PD);
;PCODE: $0000032C VOL: 0
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 0
;PCODE: $0000032F VOL: 0
;PCODE: $00000330 VOL: 0
;PCODE: $00000331 VOL: 0
; 0000 015B         outputs_PA = (PINA & IC_4532.output_mask_PA);
;PCODE: $00000332 VOL: 0
;PCODE: $00000333 VOL: 0
;PCODE: $00000334 VOL: 0
;PCODE: $00000335 VOL: 0
;PCODE: $00000336 VOL: 0
;PCODE: $00000337 VOL: 0
; 0000 015C 
; 0000 015D 		delay_ms(10);
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
;PCODE: $0000033A VOL: 0
; 0000 015E 
; 0000 015F         //Extract the relevant bits
; 0000 0160         q0 = (outputs_PA >> PORTA7) & 0x01;
;PCODE: $0000033B VOL: 0
;PCODE: $0000033C VOL: 0
;PCODE: $0000033D VOL: 0
;PCODE: $0000033E VOL: 0
; 0000 0161         q2 = (outputs_PD >> PORTD5) & 0x01;
;PCODE: $0000033F VOL: 0
;PCODE: $00000340 VOL: 0
;PCODE: $00000341 VOL: 0
;PCODE: $00000342 VOL: 0
; 0000 0162         q1 = (outputs_PD >> PORTD6) & 0x01;
;PCODE: $00000343 VOL: 0
;PCODE: $00000344 VOL: 0
;PCODE: $00000345 VOL: 0
;PCODE: $00000346 VOL: 0
; 0000 0163 
; 0000 0164         // Combine the outputs
; 0000 0165         combined_output = (q2 << 2) | (q1 << 1) | q0;
;PCODE: $00000347 VOL: 0
;PCODE: $00000348 VOL: 0
;PCODE: $00000349 VOL: 0
;PCODE: $0000034A VOL: 0
;PCODE: $0000034B VOL: 0
;PCODE: $0000034C VOL: 0
;PCODE: $0000034D VOL: 0
;PCODE: $0000034E VOL: 0
; 0000 0166 
; 0000 0167         //Calculate the expected output
; 0000 0168         expected_output = input;
;PCODE: $0000034F VOL: 0
;PCODE: $00000350 VOL: 0
; 0000 0169 
; 0000 016A         // Check the outputs
; 0000 016B         if (combined_output != expected_output) {
;PCODE: $00000351 VOL: 0
;PCODE: $00000352 VOL: 0
;PCODE: $00000353 VOL: 0
; 0000 016C             return 0; // Test failed
;PCODE: $00000354 VOL: 0
;PCODE: $00000355 VOL: 0
;PCODE: $00000356 VOL: 0
;PCODE: $00000357 VOL: 0
; 0000 016D         }
; 0000 016E     }
;PCODE: $00000358 VOL: 0
;PCODE: $00000359 VOL: 0
;PCODE: $0000035A VOL: 0
;PCODE: $0000035B VOL: 0
;PCODE: $0000035C VOL: 0
;PCODE: $0000035D VOL: 0
; 0000 016F 
; 0000 0170     glcd_clear();
;PCODE: $0000035E VOL: 0
; 0000 0171     glcd_drawCenteredStr("IC is 4532", LINES_DY * 2, 1);
;PCODE: $0000035F VOL: 0
;PCODE: $00000360 VOL: 0
;PCODE: $00000361 VOL: 0
;PCODE: $00000362 VOL: 0
;PCODE: $00000363 VOL: 0
;PCODE: $00000364 VOL: 0
;PCODE: $00000365 VOL: 0
; 0000 0172     glcd_drawCenteredStr("DIP16 - CMOS", LINES_DY * 3, 1);
;PCODE: $00000366 VOL: 0
;PCODE: $00000367 VOL: 0
;PCODE: $00000368 VOL: 0
;PCODE: $00000369 VOL: 0
;PCODE: $0000036A VOL: 0
;PCODE: $0000036B VOL: 0
;PCODE: $0000036C VOL: 0
; 0000 0173     return 1; // Test passed
;PCODE: $0000036D VOL: 0
;PCODE: $0000036E VOL: 0
;PCODE: $0000036F VOL: 0
;PCODE: $00000370 VOL: 0
; 0000 0174 }
;PCODE: $00000371 VOL: 0

	.DSEG
_0x40:
	.BYTE 0x18
;
;unsigned char test_74157(void) {
; 0000 0176 unsigned char test_74157(void) {

	.CSEG
;PCODE: $00000372 VOL: 0
;PCODE: $00000373 VOL: 0
; 0000 0177 	unsigned char select;
; 0000 0178     unsigned char i;
; 0000 0179     unsigned char input1, input2, expected_output;
; 0000 017A     unsigned char output1, output2, output3, output4;
; 0000 017B 
; 0000 017C 	// Configure input pins as outputs (from MCU)
; 0000 017D     DDRD |= IC_74157.input_mask_PD;
;PCODE: $00000374 VOL: 0
;PCODE: $00000375 VOL: 0
;	select -> R17
;	i -> R16
;	input1 -> R19
;	input2 -> R18
;	expected_output -> R21
;	output1 -> R20
;	output2 -> Y+8
;	output3 -> Y+7
;	output4 -> Y+6
;PCODE: $00000376 VOL: 0
;PCODE: $00000377 VOL: 0
;PCODE: $00000378 VOL: 0
;PCODE: $00000379 VOL: 0
;PCODE: $0000037A VOL: 0
;PCODE: $0000037B VOL: 0
; 0000 017E     DDRA |= IC_74157.input_mask_PA;
;PCODE: $0000037C VOL: 0
;PCODE: $0000037D VOL: 0
;PCODE: $0000037E VOL: 0
;PCODE: $0000037F VOL: 0
;PCODE: $00000380 VOL: 0
;PCODE: $00000381 VOL: 0
; 0000 017F 
; 0000 0180     // Configure output pins as inputs (from MCU)
; 0000 0181     DDRD &= ~IC_74157.output_mask_PD;
;PCODE: $00000382 VOL: 0
;PCODE: $00000383 VOL: 0
;PCODE: $00000384 VOL: 0
;PCODE: $00000385 VOL: 0
;PCODE: $00000386 VOL: 0
;PCODE: $00000387 VOL: 0
;PCODE: $00000388 VOL: 0
; 0000 0182     DDRA &= ~IC_74157.output_mask_PA;
;PCODE: $00000389 VOL: 0
;PCODE: $0000038A VOL: 0
;PCODE: $0000038B VOL: 0
;PCODE: $0000038C VOL: 0
;PCODE: $0000038D VOL: 0
;PCODE: $0000038E VOL: 0
;PCODE: $0000038F VOL: 0
; 0000 0183 
; 0000 0184 	power_ic(IC_74157.package_type);
;PCODE: $00000390 VOL: 0
;PCODE: $00000391 VOL: 0
;PCODE: $00000392 VOL: 0
; 0000 0185 
; 0000 0186 	// Enable the 74157
; 0000 0187     PORTA &= ~(1 << PORTA1); // Enable low (PORTA1)
;PCODE: $00000393 VOL: 0
;PCODE: $00000394 VOL: 0
; 0000 0188 	PORTD &= ~(1 << PORTD0); // Select pin cleared
;PCODE: $00000395 VOL: 0
;PCODE: $00000396 VOL: 0
; 0000 0189 
; 0000 018A 	for (select = 0; select <= 1; select++) {
;PCODE: $00000397 VOL: 0
;PCODE: $00000398 VOL: 0
;PCODE: $00000399 VOL: 0
;PCODE: $0000039A VOL: 0
;PCODE: $0000039B VOL: 0
;PCODE: $0000039C VOL: 0
;PCODE: $0000039D VOL: 0
;PCODE: $0000039E VOL: 0
;PCODE: $0000039F VOL: 0
; 0000 018B         for (i = 0; i < 4; i++) {
;PCODE: $000003A0 VOL: 0
;PCODE: $000003A1 VOL: 0
;PCODE: $000003A2 VOL: 0
;PCODE: $000003A3 VOL: 0
;PCODE: $000003A4 VOL: 0
;PCODE: $000003A5 VOL: 0
;PCODE: $000003A6 VOL: 0
;PCODE: $000003A7 VOL: 0
;PCODE: $000003A8 VOL: 0
; 0000 018C 			input1 = (i & 0x01); // LSB of inputs
;PCODE: $000003A9 VOL: 0
;PCODE: $000003AA VOL: 0
;PCODE: $000003AB VOL: 0
; 0000 018D 			input2 = (i & 0x02) >> 1; // MSB of inputs
;PCODE: $000003AC VOL: 0
;PCODE: $000003AD VOL: 0
;PCODE: $000003AE VOL: 0
;PCODE: $000003AF VOL: 0
;PCODE: $000003B0 VOL: 0
; 0000 018E 
; 0000 018F 			// Set inputs for Mux 1 and Mux 2 on PORTD
; 0000 0190 			PORTD = (PORTD & ~IC_74157.input_mask_PD) | (input1 << PORTD1) | (input2 << PORTD2) | (input1 << PORTD4) | (input2 << ...
;PCODE: $000003B1 VOL: 0
;PCODE: $000003B2 VOL: 0
;PCODE: $000003B3 VOL: 0
;PCODE: $000003B4 VOL: 0
;PCODE: $000003B5 VOL: 0
;PCODE: $000003B6 VOL: 0
;PCODE: $000003B7 VOL: 0
;PCODE: $000003B8 VOL: 0
;PCODE: $000003B9 VOL: 0
;PCODE: $000003BA VOL: 0
;PCODE: $000003BB VOL: 0
;PCODE: $000003BC VOL: 0
;PCODE: $000003BD VOL: 0
;PCODE: $000003BE VOL: 0
;PCODE: $000003BF VOL: 0
;PCODE: $000003C0 VOL: 0
;PCODE: $000003C1 VOL: 0
;PCODE: $000003C2 VOL: 0
;PCODE: $000003C3 VOL: 0
;PCODE: $000003C4 VOL: 0
;PCODE: $000003C5 VOL: 0
;PCODE: $000003C6 VOL: 0
;PCODE: $000003C7 VOL: 0
; 0000 0191 
; 0000 0192 			// Set inputs for Mux 3 and Mux 4 on PORTA
; 0000 0193 			PORTA = (PORTA & ~IC_74157.input_mask_PA) | (input1 << PORTA2) | (input2 << PORTA3) | (input1 << PORTA5) | (input2 << ...
;PCODE: $000003C8 VOL: 0
;PCODE: $000003C9 VOL: 0
;PCODE: $000003CA VOL: 0
;PCODE: $000003CB VOL: 0
;PCODE: $000003CC VOL: 0
;PCODE: $000003CD VOL: 0
;PCODE: $000003CE VOL: 0
;PCODE: $000003CF VOL: 0
;PCODE: $000003D0 VOL: 0
;PCODE: $000003D1 VOL: 0
;PCODE: $000003D2 VOL: 0
;PCODE: $000003D3 VOL: 0
;PCODE: $000003D4 VOL: 0
;PCODE: $000003D5 VOL: 0
;PCODE: $000003D6 VOL: 0
;PCODE: $000003D7 VOL: 0
;PCODE: $000003D8 VOL: 0
;PCODE: $000003D9 VOL: 0
;PCODE: $000003DA VOL: 0
;PCODE: $000003DB VOL: 0
;PCODE: $000003DC VOL: 0
;PCODE: $000003DD VOL: 0
;PCODE: $000003DE VOL: 0
; 0000 0194 
; 0000 0195 			// Set Select Pin
; 0000 0196 			PORTD |= (select << PORTD0);
;PCODE: $000003DF VOL: 0
;PCODE: $000003E0 VOL: 0
;PCODE: $000003E1 VOL: 0
; 0000 0197 
; 0000 0198 			delay_ms(20);
;PCODE: $000003E2 VOL: 0
;PCODE: $000003E3 VOL: 0
;PCODE: $000003E4 VOL: 0
; 0000 0199 
; 0000 019A 			// Read outputs for all Muxs
; 0000 019B 			output1 = (PIND & (1 << PORTD3)) >> PORTD3; // Gate 1 output
;PCODE: $000003E5 VOL: 0
;PCODE: $000003E6 VOL: 0
;PCODE: $000003E7 VOL: 0
;PCODE: $000003E8 VOL: 0
;PCODE: $000003E9 VOL: 0
; 0000 019C 			output2 = (PIND & (1 << PORTD6)) >> PORTD6; // Gate 2 output
;PCODE: $000003EA VOL: 0
;PCODE: $000003EB VOL: 0
;PCODE: $000003EC VOL: 0
;PCODE: $000003ED VOL: 0
;PCODE: $000003EE VOL: 0
;PCODE: $000003EF VOL: 0
; 0000 019D 			output3 = (PINA & (1 << PORTA7)) >> PORTA7; // Gate 3 output
;PCODE: $000003F0 VOL: 0
;PCODE: $000003F1 VOL: 0
;PCODE: $000003F2 VOL: 0
;PCODE: $000003F3 VOL: 0
;PCODE: $000003F4 VOL: 0
;PCODE: $000003F5 VOL: 0
; 0000 019E 			output4 = (PINA & (1 << PORTA4)) >> PORTA4; // Gate 4 output
;PCODE: $000003F6 VOL: 0
;PCODE: $000003F7 VOL: 0
;PCODE: $000003F8 VOL: 0
;PCODE: $000003F9 VOL: 0
;PCODE: $000003FA VOL: 0
; 0000 019F 
; 0000 01A0 			delay_ms(10);
;PCODE: $000003FB VOL: 0
;PCODE: $000003FC VOL: 0
;PCODE: $000003FD VOL: 0
; 0000 01A1 
; 0000 01A2 			// Verify Mux truth table
; 0000 01A3 			expected_output = (select == 0) ? input1 : input2;
;PCODE: $000003FE VOL: 0
;PCODE: $000003FF VOL: 0
;PCODE: $00000400 VOL: 0
;PCODE: $00000401 VOL: 0
;PCODE: $00000402 VOL: 0
;PCODE: $00000403 VOL: 0
;PCODE: $00000404 VOL: 0
;PCODE: $00000405 VOL: 0
;PCODE: $00000406 VOL: 0
; 0000 01A4             if (output1 != expected_output) return 0;
;PCODE: $00000407 VOL: 0
;PCODE: $00000408 VOL: 0
;PCODE: $00000409 VOL: 0
;PCODE: $0000040A VOL: 0
;PCODE: $0000040B VOL: 0
;PCODE: $0000040C VOL: 0
;PCODE: $0000040D VOL: 0
; 0000 01A5             if (output2 != expected_output) return 0;
;PCODE: $0000040E VOL: 0
;PCODE: $0000040F VOL: 0
;PCODE: $00000410 VOL: 0
;PCODE: $00000411 VOL: 0
;PCODE: $00000412 VOL: 0
;PCODE: $00000413 VOL: 0
;PCODE: $00000414 VOL: 0
;PCODE: $00000415 VOL: 0
; 0000 01A6             if (output3 != expected_output) return 0;
;PCODE: $00000416 VOL: 0
;PCODE: $00000417 VOL: 0
;PCODE: $00000418 VOL: 0
;PCODE: $00000419 VOL: 0
;PCODE: $0000041A VOL: 0
;PCODE: $0000041B VOL: 0
;PCODE: $0000041C VOL: 0
;PCODE: $0000041D VOL: 0
; 0000 01A7             if (output4 != expected_output) return 0;
;PCODE: $0000041E VOL: 0
;PCODE: $0000041F VOL: 0
;PCODE: $00000420 VOL: 0
;PCODE: $00000421 VOL: 0
;PCODE: $00000422 VOL: 0
;PCODE: $00000423 VOL: 0
;PCODE: $00000424 VOL: 0
;PCODE: $00000425 VOL: 0
; 0000 01A8 
; 0000 01A9 		}
;PCODE: $00000426 VOL: 0
;PCODE: $00000427 VOL: 0
;PCODE: $00000428 VOL: 0
;PCODE: $00000429 VOL: 0
;PCODE: $0000042A VOL: 0
;PCODE: $0000042B VOL: 0
; 0000 01AA     }
;PCODE: $0000042C VOL: 0
;PCODE: $0000042D VOL: 0
;PCODE: $0000042E VOL: 0
;PCODE: $0000042F VOL: 0
;PCODE: $00000430 VOL: 0
; 0000 01AB 
; 0000 01AC 	glcd_clear();
;PCODE: $00000431 VOL: 0
; 0000 01AD     glcd_drawCenteredStr("IC is 74157", LINES_DY * 2, 1);
;PCODE: $00000432 VOL: 0
;PCODE: $00000433 VOL: 0
;PCODE: $00000434 VOL: 0
;PCODE: $00000435 VOL: 0
;PCODE: $00000436 VOL: 0
;PCODE: $00000437 VOL: 0
;PCODE: $00000438 VOL: 0
; 0000 01AE     glcd_drawCenteredStr("DIP16 - TTL", LINES_DY * 3, 1);
;PCODE: $00000439 VOL: 0
;PCODE: $0000043A VOL: 0
;PCODE: $0000043B VOL: 0
;PCODE: $0000043C VOL: 0
;PCODE: $0000043D VOL: 0
;PCODE: $0000043E VOL: 0
;PCODE: $0000043F VOL: 0
; 0000 01AF     return 1; // Test passed
;PCODE: $00000440 VOL: 0
;PCODE: $00000441 VOL: 0
;PCODE: $00000442 VOL: 0
;PCODE: $00000443 VOL: 0
; 0000 01B0 }
;PCODE: $00000444 VOL: 0

	.DSEG
_0x4E:
	.BYTE 0x18
;
;
;unsigned char test_74156(void) {
; 0000 01B3 unsigned char test_74156(void) {

	.CSEG
;PCODE: $00000445 VOL: 0
;PCODE: $00000446 VOL: 0
; 0000 01B4 	unsigned char address;
; 0000 01B5     unsigned char expected_output;
; 0000 01B6     unsigned char outputs_PD;
; 0000 01B7     unsigned char outputs_PA;
; 0000 01B8 //	char str[12];
; 0000 01B9 
; 0000 01BA 	// Configure input pins as outputs (from MCU)
; 0000 01BB     DDRD |= IC_74156.input_mask_PD;
;PCODE: $00000447 VOL: 0
;	address -> R17
;	expected_output -> R16
;	outputs_PD -> R19
;	outputs_PA -> R18
;PCODE: $00000448 VOL: 0
;PCODE: $00000449 VOL: 0
;PCODE: $0000044A VOL: 0
;PCODE: $0000044B VOL: 0
;PCODE: $0000044C VOL: 0
;PCODE: $0000044D VOL: 0
; 0000 01BC     DDRA |= IC_74156.input_mask_PA;
;PCODE: $0000044E VOL: 0
;PCODE: $0000044F VOL: 0
;PCODE: $00000450 VOL: 0
;PCODE: $00000451 VOL: 0
;PCODE: $00000452 VOL: 0
;PCODE: $00000453 VOL: 0
; 0000 01BD 
; 0000 01BE     // Configure output pins as inputs (from MCU)
; 0000 01BF     DDRD &= ~IC_74156.output_mask_PD;
;PCODE: $00000454 VOL: 0
;PCODE: $00000455 VOL: 0
;PCODE: $00000456 VOL: 0
;PCODE: $00000457 VOL: 0
;PCODE: $00000458 VOL: 0
;PCODE: $00000459 VOL: 0
;PCODE: $0000045A VOL: 0
; 0000 01C0     DDRA &= ~IC_74156.output_mask_PA;
;PCODE: $0000045B VOL: 0
;PCODE: $0000045C VOL: 0
;PCODE: $0000045D VOL: 0
;PCODE: $0000045E VOL: 0
;PCODE: $0000045F VOL: 0
;PCODE: $00000460 VOL: 0
;PCODE: $00000461 VOL: 0
; 0000 01C1 
; 0000 01C2 	// Enable pull-up for ouptuts
; 0000 01C3 	PORTD |= IC_74156.output_mask_PD;
;PCODE: $00000462 VOL: 0
;PCODE: $00000463 VOL: 0
;PCODE: $00000464 VOL: 0
;PCODE: $00000465 VOL: 0
;PCODE: $00000466 VOL: 0
;PCODE: $00000467 VOL: 0
; 0000 01C4 	PORTA |= IC_74156.output_mask_PA ;
;PCODE: $00000468 VOL: 0
;PCODE: $00000469 VOL: 0
;PCODE: $0000046A VOL: 0
;PCODE: $0000046B VOL: 0
;PCODE: $0000046C VOL: 0
;PCODE: $0000046D VOL: 0
; 0000 01C5 
; 0000 01C6 	power_ic(IC_74156.package_type);
;PCODE: $0000046E VOL: 0
;PCODE: $0000046F VOL: 0
;PCODE: $00000470 VOL: 0
; 0000 01C7 
; 0000 01C8 	// Enable the 74156
; 0000 01C9     PORTA &= ~(1 << PORTA2);
;PCODE: $00000471 VOL: 0
;PCODE: $00000472 VOL: 0
; 0000 01CA 	PORTD &= ~(1 << PORTD1);
;PCODE: $00000473 VOL: 0
;PCODE: $00000474 VOL: 0
; 0000 01CB 
; 0000 01CC 	// Test for all addresses
; 0000 01CD     for (address = 0; address <= 3; address++) {
;PCODE: $00000475 VOL: 0
;PCODE: $00000476 VOL: 0
;PCODE: $00000477 VOL: 0
;PCODE: $00000478 VOL: 0
;PCODE: $00000479 VOL: 0
;PCODE: $0000047A VOL: 0
;PCODE: $0000047B VOL: 0
;PCODE: $0000047C VOL: 0
;PCODE: $0000047D VOL: 0
; 0000 01CE 
; 0000 01CF 
; 0000 01D0         // Set address lines
; 0000 01D1         PORTD = (PORTD & ~IC_74156.input_mask_PD) | (((address & 0x02) >> 1) << PORTD2); // Address B
;PCODE: $0000047E VOL: 0
;PCODE: $0000047F VOL: 0
;PCODE: $00000480 VOL: 0
;PCODE: $00000481 VOL: 0
;PCODE: $00000482 VOL: 0
;PCODE: $00000483 VOL: 0
;PCODE: $00000484 VOL: 0
;PCODE: $00000485 VOL: 0
;PCODE: $00000486 VOL: 0
;PCODE: $00000487 VOL: 0
;PCODE: $00000488 VOL: 0
;PCODE: $00000489 VOL: 0
;PCODE: $0000048A VOL: 0
;PCODE: $0000048B VOL: 0
; 0000 01D2         PORTA = (PORTA & ~IC_74156.input_mask_PA) | ((address & 0x01) << PORTA3); // Address A
;PCODE: $0000048C VOL: 0
;PCODE: $0000048D VOL: 0
;PCODE: $0000048E VOL: 0
;PCODE: $0000048F VOL: 0
;PCODE: $00000490 VOL: 0
;PCODE: $00000491 VOL: 0
;PCODE: $00000492 VOL: 0
;PCODE: $00000493 VOL: 0
;PCODE: $00000494 VOL: 0
;PCODE: $00000495 VOL: 0
;PCODE: $00000496 VOL: 0
;PCODE: $00000497 VOL: 0
; 0000 01D3 
; 0000 01D4 
; 0000 01D5         // Test with input high
; 0000 01D6         PORTD |= (1 << PORTD0); // I1 high
;PCODE: $00000498 VOL: 0
;PCODE: $00000499 VOL: 0
; 0000 01D7         PORTA &= ~(1 << PORTA1); // I2 Low
;PCODE: $0000049A VOL: 0
;PCODE: $0000049B VOL: 0
; 0000 01D8 
; 0000 01D9 
; 0000 01DA         delay_ms(20);
;PCODE: $0000049C VOL: 0
;PCODE: $0000049D VOL: 0
;PCODE: $0000049E VOL: 0
; 0000 01DB 
; 0000 01DC         outputs_PD = (PIND & IC_74156.output_mask_PD) >> PORTD3;
;PCODE: $0000049F VOL: 0
;PCODE: $000004A0 VOL: 0
;PCODE: $000004A1 VOL: 0
;PCODE: $000004A2 VOL: 0
;PCODE: $000004A3 VOL: 0
;PCODE: $000004A4 VOL: 0
;PCODE: $000004A5 VOL: 0
;PCODE: $000004A6 VOL: 0
; 0000 01DD         outputs_PA = (PINA & IC_74156.output_mask_PA) >> PORTA4;
;PCODE: $000004A7 VOL: 0
;PCODE: $000004A8 VOL: 0
;PCODE: $000004A9 VOL: 0
;PCODE: $000004AA VOL: 0
;PCODE: $000004AB VOL: 0
;PCODE: $000004AC VOL: 0
;PCODE: $000004AD VOL: 0
;PCODE: $000004AE VOL: 0
; 0000 01DE 		expected_output = (~(1 << address)) & 0x0F;
;PCODE: $000004AF VOL: 0
;PCODE: $000004B0 VOL: 0
;PCODE: $000004B1 VOL: 0
;PCODE: $000004B2 VOL: 0
;PCODE: $000004B3 VOL: 0
;PCODE: $000004B4 VOL: 0
; 0000 01DF 
; 0000 01E0 		outputs_PD = reverseBits(outputs_PD) >> 4;
;PCODE: $000004B5 VOL: 0
;PCODE: $000004B6 VOL: 0
;PCODE: $000004B7 VOL: 0
;PCODE: $000004B8 VOL: 0
;PCODE: $000004B9 VOL: 0
; 0000 01E1 		outputs_PA = reverseBits(outputs_PA) >> 4;
;PCODE: $000004BA VOL: 0
;PCODE: $000004BB VOL: 0
;PCODE: $000004BC VOL: 0
;PCODE: $000004BD VOL: 0
;PCODE: $000004BE VOL: 0
; 0000 01E2 
; 0000 01E3 
; 0000 01E4 		// sprintf(str, "%d %d %d", expected_output, outputs_PD, outputs_PA);
; 0000 01E5 		// glcd_drawCenteredStr(str, LINES_DY * 3, 1);
; 0000 01E6 
; 0000 01E7 		delay_ms(10);
;PCODE: $000004BF VOL: 0
;PCODE: $000004C0 VOL: 0
;PCODE: $000004C1 VOL: 0
; 0000 01E8 
; 0000 01E9 
; 0000 01EA         if((outputs_PD != expected_output) || (outputs_PA != expected_output)) return 0;
;PCODE: $000004C2 VOL: 0
;PCODE: $000004C3 VOL: 0
;PCODE: $000004C4 VOL: 0
;PCODE: $000004C5 VOL: 0
;PCODE: $000004C6 VOL: 0
;PCODE: $000004C7 VOL: 0
;PCODE: $000004C8 VOL: 0
;PCODE: $000004C9 VOL: 0
;PCODE: $000004CA VOL: 0
;PCODE: $000004CB VOL: 0
;PCODE: $000004CC VOL: 0
;PCODE: $000004CD VOL: 0
; 0000 01EB 
; 0000 01EC 
; 0000 01ED     }
;PCODE: $000004CE VOL: 0
;PCODE: $000004CF VOL: 0
;PCODE: $000004D0 VOL: 0
;PCODE: $000004D1 VOL: 0
;PCODE: $000004D2 VOL: 0
;PCODE: $000004D3 VOL: 0
; 0000 01EE 
; 0000 01EF 	glcd_clear();
;PCODE: $000004D4 VOL: 0
; 0000 01F0     glcd_drawCenteredStr("IC is 74156", LINES_DY * 2, 1);
;PCODE: $000004D5 VOL: 0
;PCODE: $000004D6 VOL: 0
;PCODE: $000004D7 VOL: 0
;PCODE: $000004D8 VOL: 0
;PCODE: $000004D9 VOL: 0
;PCODE: $000004DA VOL: 0
;PCODE: $000004DB VOL: 0
; 0000 01F1     glcd_drawCenteredStr("DIP16 - TTL", LINES_DY * 3, 1);
;PCODE: $000004DC VOL: 0
;PCODE: $000004DD VOL: 0
;PCODE: $000004DE VOL: 0
;PCODE: $000004DF VOL: 0
;PCODE: $000004E0 VOL: 0
;PCODE: $000004E1 VOL: 0
;PCODE: $000004E2 VOL: 0
; 0000 01F2     return 1; // Test passed
;PCODE: $000004E3 VOL: 0
;PCODE: $000004E4 VOL: 0
;PCODE: $000004E5 VOL: 0
;PCODE: $000004E6 VOL: 0
; 0000 01F3 
; 0000 01F4 }
;PCODE: $000004E7 VOL: 0

	.DSEG
_0x55:
	.BYTE 0x18
;
;
;
;unsigned char is_button_pressed(void) {
; 0000 01F8 unsigned char is_button_pressed(void) {

	.CSEG
;PCODE: $000004E8 VOL: 0
;PCODE: $000004E9 VOL: 0
; 0000 01F9     // Read the button state
; 0000 01FA     if (!(PINB & (1 << TEST_BUTTON_PIN))) { // Active LOW
;PCODE: $000004EA VOL: 0
;PCODE: $000004EB VOL: 0
;PCODE: $000004EC VOL: 0
; 0000 01FB         delay_ms(50); // Debounce delay
;PCODE: $000004ED VOL: 0
;PCODE: $000004EE VOL: 0
;PCODE: $000004EF VOL: 0
; 0000 01FC         if (!(PINB & (1 << TEST_BUTTON_PIN))) {
;PCODE: $000004F0 VOL: 0
;PCODE: $000004F1 VOL: 0
;PCODE: $000004F2 VOL: 0
; 0000 01FD             return 1; // Button is pressed
;PCODE: $000004F3 VOL: 0
;PCODE: $000004F4 VOL: 0
; 0000 01FE         }
; 0000 01FF     }
;PCODE: $000004F5 VOL: 0
; 0000 0200     return 0; // Button is not pressed
;PCODE: $000004F6 VOL: 0
;PCODE: $000004F7 VOL: 0
;PCODE: $000004F8 VOL: 0
; 0000 0201 }
;PCODE: $000004F9 VOL: 0
;
;
;void clear_LEDs() {
; 0000 0204 void clear_LEDs() {
;PCODE: $000004FA VOL: 0
;PCODE: $000004FB VOL: 0
; 0000 0205 	PORTC &= ~(1 << LED_PASS);
;PCODE: $000004FC VOL: 0
;PCODE: $000004FD VOL: 0
; 0000 0206 	PORTC &= ~(1 << LED_FAIL);
;PCODE: $000004FE VOL: 0
;PCODE: $000004FF VOL: 0
; 0000 0207 
; 0000 0208 }
;PCODE: $00000500 VOL: 0
;PCODE: $00000501 VOL: 0
;
;void clear_ports() {
; 0000 020A void clear_ports() {
;PCODE: $00000502 VOL: 0
;PCODE: $00000503 VOL: 0
; 0000 020B 	PORTA = 0;
;PCODE: $00000504 VOL: 0
;PCODE: $00000505 VOL: 0
; 0000 020C 	PORTD = 0;
;PCODE: $00000506 VOL: 0
;PCODE: $00000507 VOL: 0
; 0000 020D }
;PCODE: $00000508 VOL: 0
;PCODE: $00000509 VOL: 0
;
;
;
;void display_result(unsigned char result) {
; 0000 0211 void display_result(unsigned char result) {
;PCODE: $0000050A VOL: 0
;PCODE: $0000050B VOL: 0
; 0000 0212     if (result) {
;PCODE: $0000050C VOL: 0
;	result -> Y+0
;PCODE: $0000050D VOL: 0
;PCODE: $0000050E VOL: 0
;PCODE: $0000050F VOL: 0
; 0000 0213         PORTC |= (1 << LED_PASS); // Light up pass LED
;PCODE: $00000510 VOL: 0
;PCODE: $00000511 VOL: 0
; 0000 0214         PORTC &= ~(1 << LED_FAIL); // Turn off fail LED
;PCODE: $00000512 VOL: 0
;PCODE: $00000513 VOL: 0
; 0000 0215         // glcd_clear();
; 0000 0216 		// glcd_drawCenteredStr("OK!!", LINES_DY * 2, 1);
; 0000 0217 
; 0000 0218 
; 0000 0219     } else {
;PCODE: $00000514 VOL: 0
;PCODE: $00000515 VOL: 0
; 0000 021A         PORTC |= (1 << LED_FAIL); // Light up fail LED
;PCODE: $00000516 VOL: 0
;PCODE: $00000517 VOL: 0
; 0000 021B         PORTC &= ~(1 << LED_PASS); // Turn off pass LED
;PCODE: $00000518 VOL: 0
;PCODE: $00000519 VOL: 0
; 0000 021C         glcd_clear();
;PCODE: $0000051A VOL: 0
; 0000 021D 		glcd_drawCenteredStr("Unknown IC", LINES_DY * 2, 1);
;PCODE: $0000051B VOL: 0
;PCODE: $0000051C VOL: 0
;PCODE: $0000051D VOL: 0
;PCODE: $0000051E VOL: 0
;PCODE: $0000051F VOL: 0
;PCODE: $00000520 VOL: 0
;PCODE: $00000521 VOL: 0
; 0000 021E 
; 0000 021F     }
;PCODE: $00000522 VOL: 0
; 0000 0220 }
;PCODE: $00000523 VOL: 0
;PCODE: $00000524 VOL: 0
;PCODE: $00000525 VOL: 0

	.DSEG
_0x5A:
	.BYTE 0xB
;
;
;unsigned char reverseBits(unsigned char num)
; 0000 0224 {

	.CSEG
;PCODE: $00000526 VOL: 0
;PCODE: $00000527 VOL: 0
; 0000 0225     unsigned char count = sizeof(num) * 8 - 1;
; 0000 0226     unsigned char reverse_num = num;
; 0000 0227 
; 0000 0228     num >>= 1;
;PCODE: $00000528 VOL: 0
;PCODE: $00000529 VOL: 0
;PCODE: $0000052A VOL: 0
;	num -> Y+2
;	count -> R17
;	reverse_num -> R16
;PCODE: $0000052B VOL: 0
;PCODE: $0000052C VOL: 0
;PCODE: $0000052D VOL: 0
;PCODE: $0000052E VOL: 0
;PCODE: $0000052F VOL: 0
;PCODE: $00000530 VOL: 0
;PCODE: $00000531 VOL: 0
; 0000 0229     while (num) {
;PCODE: $00000532 VOL: 0
;PCODE: $00000533 VOL: 0
;PCODE: $00000534 VOL: 0
;PCODE: $00000535 VOL: 0
; 0000 022A         reverse_num <<= 1;
;PCODE: $00000536 VOL: 0
; 0000 022B         reverse_num |= num & 1;
;PCODE: $00000537 VOL: 0
;PCODE: $00000538 VOL: 0
;PCODE: $00000539 VOL: 0
;PCODE: $0000053A VOL: 0
; 0000 022C         num >>= 1;
;PCODE: $0000053B VOL: 0
;PCODE: $0000053C VOL: 0
;PCODE: $0000053D VOL: 0
; 0000 022D         count--;
;PCODE: $0000053E VOL: 0
;PCODE: $0000053F VOL: 0
; 0000 022E     }
;PCODE: $00000540 VOL: 0
;PCODE: $00000541 VOL: 0
; 0000 022F     reverse_num <<= count;
;PCODE: $00000542 VOL: 0
;PCODE: $00000543 VOL: 0
;PCODE: $00000544 VOL: 0
;PCODE: $00000545 VOL: 0
; 0000 0230     return reverse_num;
;PCODE: $00000546 VOL: 0
;PCODE: $00000547 VOL: 0
;PCODE: $00000548 VOL: 0
;PCODE: $00000549 VOL: 0
;PCODE: $0000054A VOL: 0
;PCODE: $0000054B VOL: 0
;PCODE: $0000054C VOL: 0
; 0000 0231 }
;PCODE: $0000054D VOL: 0
;
;
;void glcd_drawCenteredStr(const char *str, uint8_t y, uint8_t dx)
; 0000 0235 {
;PCODE: $0000054E VOL: 0
;PCODE: $0000054F VOL: 0
; 0000 0236     // Calculate the length of the string
; 0000 0237     uint8_t len = strlen(str);
; 0000 0238     uint8_t x;
; 0000 0239     uint8_t i = 0;
; 0000 023A 
; 0000 023B     // Calculate the starting X coordinate to center the string
; 0000 023C     if (len <= 15)
;PCODE: $00000550 VOL: 0
;PCODE: $00000551 VOL: 0
;	*str -> Y+6
;	y -> Y+5
;	dx -> Y+4
;	len -> R17
;	x -> R16
;	i -> R19
;PCODE: $00000552 VOL: 0
;PCODE: $00000553 VOL: 0
;PCODE: $00000554 VOL: 0
;PCODE: $00000555 VOL: 0
;PCODE: $00000556 VOL: 0
;PCODE: $00000557 VOL: 0
;PCODE: $00000558 VOL: 0
;PCODE: $00000559 VOL: 0
; 0000 023D     {
; 0000 023E         x = (GLCD_LCD_WIDTH - len * 5 - (len - 1) * dx) / 2; // Center X position
;PCODE: $0000055A VOL: 0
;PCODE: $0000055B VOL: 0
;PCODE: $0000055C VOL: 0
;PCODE: $0000055D VOL: 0
;PCODE: $0000055E VOL: 0
;PCODE: $0000055F VOL: 0
;PCODE: $00000560 VOL: 0
;PCODE: $00000561 VOL: 0
;PCODE: $00000562 VOL: 0
;PCODE: $00000563 VOL: 0
;PCODE: $00000564 VOL: 0
;PCODE: $00000565 VOL: 0
;PCODE: $00000566 VOL: 0
;PCODE: $00000567 VOL: 0
;PCODE: $00000568 VOL: 0
;PCODE: $00000569 VOL: 0
;PCODE: $0000056A VOL: 0
; 0000 023F     }
; 0000 0240     else
;PCODE: $0000056B VOL: 0
;PCODE: $0000056C VOL: 0
; 0000 0241     {
; 0000 0242         x = 0; // Start at the beginning for long strings
;PCODE: $0000056D VOL: 0
;PCODE: $0000056E VOL: 0
; 0000 0243     }
;PCODE: $0000056F VOL: 0
; 0000 0244 
; 0000 0245 
; 0000 0246     // Loop through each character in the string
; 0000 0247     while (len > 0)
;PCODE: $00000570 VOL: 0
;PCODE: $00000571 VOL: 0
;PCODE: $00000572 VOL: 0
;PCODE: $00000573 VOL: 0
; 0000 0248     {
; 0000 0249         char c = str[i++];
; 0000 024A         if (!c)
;PCODE: $00000574 VOL: 0
;	*str -> Y+7
;	y -> Y+6
;	dx -> Y+5
;	c -> Y+0
;PCODE: $00000575 VOL: 0
;PCODE: $00000576 VOL: 0
;PCODE: $00000577 VOL: 0
;PCODE: $00000578 VOL: 0
;PCODE: $00000579 VOL: 0
;PCODE: $0000057A VOL: 0
;PCODE: $0000057B VOL: 0
;PCODE: $0000057C VOL: 0
;PCODE: $0000057D VOL: 0
;PCODE: $0000057E VOL: 0
;PCODE: $0000057F VOL: 0
; 0000 024B         {
; 0000 024C             return; // Exit loop if null terminator is reached
;PCODE: $00000580 VOL: 0
;PCODE: $00000581 VOL: 0
;PCODE: $00000582 VOL: 0
;PCODE: $00000583 VOL: 0
; 0000 024D         }
; 0000 024E 
; 0000 024F         // Display the character using `glcd_putcharxy`
; 0000 0250         glcd_putcharxy(x, y, c);
;PCODE: $00000584 VOL: 0
;PCODE: $00000585 VOL: 0
;PCODE: $00000586 VOL: 0
;PCODE: $00000587 VOL: 0
;PCODE: $00000588 VOL: 0
;PCODE: $00000589 VOL: 0
; 0000 0251 
; 0000 0252         // Update X coordinate for the next character
; 0000 0253         x += 5 + dx; // Character width (5 pixels) + spacing
;PCODE: $0000058A VOL: 0
;PCODE: $0000058B VOL: 0
;PCODE: $0000058C VOL: 0
;PCODE: $0000058D VOL: 0
; 0000 0254 
; 0000 0255         // If X exceeds the screen width, move to the next line
; 0000 0256         if (x > GLCD_LCD_WIDTH - 6)
;PCODE: $0000058E VOL: 0
;PCODE: $0000058F VOL: 0
;PCODE: $00000590 VOL: 0
; 0000 0257         {
; 0000 0258             x = 0;
;PCODE: $00000591 VOL: 0
;PCODE: $00000592 VOL: 0
; 0000 0259             y += 10; // Move to the next line (font height + spacing)
;PCODE: $00000593 VOL: 0
;PCODE: $00000594 VOL: 0
;PCODE: $00000595 VOL: 0
; 0000 025A         }
; 0000 025B 
; 0000 025C         len--; // Decrease remaining length
;PCODE: $00000596 VOL: 0
;PCODE: $00000597 VOL: 0
;PCODE: $00000598 VOL: 0
; 0000 025D     }
;PCODE: $00000599 VOL: 0
;PCODE: $0000059A VOL: 0
;PCODE: $0000059B VOL: 0
; 0000 025E }
;PCODE: $0000059C VOL: 0
;PCODE: $0000059D VOL: 0
;PCODE: $0000059E VOL: 0
;PCODE: $0000059F VOL: 0
