
AVRASM ver. 2.1.30  D:\Studyin\Term 7\Embedded Systems\Lab Work\IC_Tester V2\IC_Tester\Debug\List\IC_Tester.asm Mon Dec 09 01:42:16 2024

                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32A
                 ;Program type           : Application
                 ;Clock frequency        : 11.059200 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32A
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 002a 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 __RESET:
00002a 94f8      	CLI
00002b 27ee      	CLR  R30
00002c bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00002d e0f1      	LDI  R31,1
00002e bff5      	OUT  MCUCR,R31
00002f bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000030 e08d      	LDI  R24,(14-2)+1
000031 e0a2      	LDI  R26,2
000032 27bb      	CLR  R27
                 __CLEAR_REG:
000033 93ed      	ST   X+,R30
000034 958a      	DEC  R24
000035 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000036 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000037 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000038 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000039 93ed      	ST   X+,R30
00003a 9701      	SBIW R24,1
00003b f7e9      	BRNE __CLEAR_SRAM
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00003c e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00003d bfed      	OUT  SPL,R30
00003e e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00003f bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000040 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000041 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000042 940c 0044 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <mega32a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;#include <io.h>
                 ;#include <delay.h>
                 ;
                 ;// Pin Definitions
                 ;#define INPUT_PINS_PD ((1 << PORTD0) | (1 << PORTD1) | (1 << PORTD3) | (1 << PORTD4))
                 ;#define INPUT_PINS_PA ((1 << PORTA5) | (1 << PORTA4) | (1 << PORTA2) | (1 << PORTA1))
                 ;
                 ;#define OUTPUT_PINS_PD ((1 << PORTD2) | (1 << PORTD5))
                 ;#define OUTPUT_PINS_PA ((1 << PORTA6) | (1 << PORTA3))
                 ;#define VCC_PIN     PORTA0
                 ;#define GND_PIN     PORTD6
                 ;#define LED_PASS    PORTC0
                 ;#define LED_FAIL    PORTC1
                 ;
                 ;// Function prototypes
                 ;void initialize_ports(void);
                 ;void power_ic(void);
                 ;unsigned char test_7408(void);
                 ;void display_result(unsigned char result);
                 ;
                 ;void main(void) {
                 ; 0000 0017 void main(void) {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0018     unsigned char result;
                 ; 0000 0019     // Initialize ports
                 ; 0000 001A     initialize_ports();
                 ;	result -> R17
000044 d007      	RCALL _initialize_ports
                 ; 0000 001B 
                 ; 0000 001C     // Power the IC
                 ; 0000 001D     power_ic();
000045 d029      	RCALL _power_ic
                 ; 0000 001E 
                 ; 0000 001F     // Test the IC
                 ; 0000 0020     result = test_7408();
000046 d02b      	RCALL _test_7408
000047 2f1e      	MOV  R17,R30
                 ; 0000 0021 
                 ; 0000 0022     // Display the result using LEDs
                 ; 0000 0023     display_result(result);
000048 2fa1      	MOV  R26,R17
000049 d098      	RCALL _display_result
                 ; 0000 0024 
                 ; 0000 0025     while (1) {
                 _0x3:
                 ; 0000 0026         // Infinite loop
                 ; 0000 0027     }
00004a cfff      	RJMP _0x3
                 ; 0000 0028 }
                 _0x6:
00004b cfff      	RJMP _0x6
                 ; .FEND
                 ;
                 ;void initialize_ports(void) {
                 ; 0000 002A void initialize_ports(void) {
                 _initialize_ports:
                 ; .FSTART _initialize_ports
                 ; 0000 002B     // Configure input pins
                 ; 0000 002C     DDRD &= ~INPUT_PINS_PD;  // Set PORTD0, PORTD1, PORTD3, PORTD4 as input
00004c b3e1      	IN   R30,0x11
00004d 7ee4      	ANDI R30,LOW(0xE4)
00004e bbe1      	OUT  0x11,R30
                 ; 0000 002D     PORTD &= ~INPUT_PINS_PD; // Disable pull-up resistors
00004f b3e2      	IN   R30,0x12
000050 7ee4      	ANDI R30,LOW(0xE4)
000051 bbe2      	OUT  0x12,R30
                 ; 0000 002E 
                 ; 0000 002F     DDRA &= ~INPUT_PINS_PA;  // Set PORTA1, PORTA2, PORTA4, PORTA5 as input
000052 b3ea      	IN   R30,0x1A
000053 7ce9      	ANDI R30,LOW(0xC9)
000054 bbea      	OUT  0x1A,R30
                 ; 0000 0030     PORTA &= ~INPUT_PINS_PA; // Disable pull-up resistors
000055 b3eb      	IN   R30,0x1B
000056 7ce9      	ANDI R30,LOW(0xC9)
000057 bbeb      	OUT  0x1B,R30
                 ; 0000 0031 
                 ; 0000 0032     // Configure output pins
                 ; 0000 0033     DDRD |= OUTPUT_PINS_PD;    // Set PORTD2, PORTD5 as output
000058 b3e1      	IN   R30,0x11
000059 62e4      	ORI  R30,LOW(0x24)
00005a bbe1      	OUT  0x11,R30
                 ; 0000 0034     PORTD &= ~OUTPUT_PINS_PD;  // Initialize outputs to low
00005b b3e2      	IN   R30,0x12
00005c 7deb      	ANDI R30,LOW(0xDB)
00005d bbe2      	OUT  0x12,R30
                 ; 0000 0035 
                 ; 0000 0036     DDRA |= OUTPUT_PINS_PA;    // Set PORTA3, PORTA6 as output
00005e b3ea      	IN   R30,0x1A
00005f 64e8      	ORI  R30,LOW(0x48)
000060 bbea      	OUT  0x1A,R30
                 ; 0000 0037     PORTA &= ~OUTPUT_PINS_PA;  // Initialize outputs to low
000061 b3eb      	IN   R30,0x1B
000062 7be7      	ANDI R30,LOW(0xB7)
000063 bbeb      	OUT  0x1B,R30
                 ; 0000 0038 
                 ; 0000 0039     // Configure power pins
                 ; 0000 003A     DDRA |= (1 << VCC_PIN);    // Set PORTA0 (VCC) as output
000064 9ad0      	SBI  0x1A,0
                 ; 0000 003B     DDRD |= (1 << GND_PIN);    // Set PORTD6 (GND) as output
000065 9a8e      	SBI  0x11,6
                 ; 0000 003C     PORTA &= ~(1 << VCC_PIN);  // Initialize VCC to low
000066 98d8      	CBI  0x1B,0
                 ; 0000 003D     PORTD &= ~(1 << GND_PIN);  // Initialize GND to low
000067 9896      	CBI  0x12,6
                 ; 0000 003E 
                 ; 0000 003F     // Configure LED pins
                 ; 0000 0040     DDRC |= (1 << LED_PASS) | (1 << LED_FAIL); // Set PORTC0, PORTC1 as output
000068 b3e4      	IN   R30,0x14
000069 60e3      	ORI  R30,LOW(0x3)
00006a bbe4      	OUT  0x14,R30
                 ; 0000 0041     PORTC &= ~((1 << LED_PASS) | (1 << LED_FAIL)); // Initialize LEDs to off
00006b b3e5      	IN   R30,0x15
00006c 7fec      	ANDI R30,LOW(0xFC)
00006d bbe5      	OUT  0x15,R30
                 ; 0000 0042 }
00006e 9508      	RET
                 ; .FEND
                 ;
                 ;void power_ic(void) {
                 ; 0000 0044 void power_ic(void) {
                 _power_ic:
                 ; .FSTART _power_ic
                 ; 0000 0045     // Provide power to the IC under test
                 ; 0000 0046     PORTA |= (1 << VCC_PIN);  // Set VCC_PIN high
00006f 9ad8      	SBI  0x1B,0
                 ; 0000 0047     PORTD &= ~(1 << GND_PIN); // Set GND_PIN low
000070 9896      	CBI  0x12,6
                 ; 0000 0048 }
000071 9508      	RET
                 ; .FEND
                 ;
                 ;unsigned char test_7408(void) {
                 ; 0000 004A unsigned char test_7408(void) {
                 _test_7408:
                 ; .FSTART _test_7408
                 ; 0000 004B 
                 ; 0000 004C     unsigned char output_gate1;
                 ; 0000 004D     unsigned char output_gate2;
                 ; 0000 004E     unsigned char output_gate3;
                 ; 0000 004F     unsigned char output_gate4;
                 ; 0000 0050 
                 ; 0000 0051     unsigned char expected_output;
                 ; 0000 0052 
                 ; 0000 0053     unsigned char input_combinations[4] = {0x00, 0x01, 0x02, 0x03};
                 ; 0000 0054     unsigned char i = 0;
                 ; 0000 0055     for (i = 0; i < 4; i++) {
000072 9724      	SBIW R28,4
000073 e0e0      	LDI  R30,LOW(0)
000074 83e8      	ST   Y,R30
000075 e0e1      	LDI  R30,LOW(1)
000076 83e9      	STD  Y+1,R30
000077 e0e2      	LDI  R30,LOW(2)
000078 83ea      	STD  Y+2,R30
000079 e0e3      	LDI  R30,LOW(3)
00007a 83eb      	STD  Y+3,R30
00007b 940e 00f6 	CALL __SAVELOCR6
                 ;	output_gate1 -> R17
                 ;	output_gate2 -> R16
                 ;	output_gate3 -> R19
                 ;	output_gate4 -> R18
                 ;	expected_output -> R21
                 ;	input_combinations -> Y+6
                 ;	i -> R20
00007d e040      	LDI  R20,0
00007e e040      	LDI  R20,LOW(0)
                 _0x8:
00007f 3044      	CPI  R20,4
000080 f008      	BRLO PC+2
000081 c05b      	RJMP _0x9
                 ; 0000 0056         // Set inputs for all gates
                 ; 0000 0057         unsigned char inputs = input_combinations[i];
                 ; 0000 0058 
                 ; 0000 0059         PORTD = (PORTD & ~INPUT_PINS_PD) | ((inputs & 0x03) << PORTD0); // PORTD0, PORTD1 inputs
000082 9721      	SBIW R28,1
                 ;	input_combinations -> Y+7
                 ;	inputs -> Y+0
000083 2fe4      	MOV  R30,R20
000084 e0f0      	LDI  R31,0
000085 01de      	MOVW R26,R28
000086 9617      	ADIW R26,7
000087 0fae      	ADD  R26,R30
000088 1fbf      	ADC  R27,R31
000089 91ec      	LD   R30,X
00008a 83e8      	ST   Y,R30
00008b b3e2      	IN   R30,0x12
00008c 7ee4      	ANDI R30,LOW(0xE4)
00008d 2fae      	MOV  R26,R30
00008e 81e8      	LD   R30,Y
00008f 70e3      	ANDI R30,LOW(0x3)
000090 2bea      	OR   R30,R26
000091 bbe2      	OUT  0x12,R30
                 ; 0000 005A         PORTA = (PORTA & ~INPUT_PINS_PA) | ((inputs & 0x03) << PORTA1); // PORTA1, PORTA2 inputs
000092 b3eb      	IN   R30,0x1B
000093 7ce9      	ANDI R30,LOW(0xC9)
000094 2fae      	MOV  R26,R30
000095 81e8      	LD   R30,Y
000096 70e3      	ANDI R30,LOW(0x3)
000097 0fee      	LSL  R30
000098 2bea      	OR   R30,R26
000099 bbeb      	OUT  0x1B,R30
                 ; 0000 005B 
                 ; 0000 005C         delay_us(10); // Allow IC to process
                +
00009a e285     +LDI R24 , LOW ( 37 )
                +__DELAY_USB_LOOP :
00009b 958a     +DEC R24
00009c f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 37
                 ; 0000 005D 
                 ; 0000 005E         // Read outputs
                 ; 0000 005F         output_gate1 = (PIND & (1 << PORTD2)) >> PORTD2;
00009d b3e0      	IN   R30,0x10
00009e 70e4      	ANDI R30,LOW(0x4)
00009f e0f0      	LDI  R31,0
0000a0 940e 00f1 	CALL __ASRW2
0000a2 2f1e      	MOV  R17,R30
                 ; 0000 0060         output_gate2 = (PIND & (1 << PORTD5)) >> PORTD5;
0000a3 b3e0      	IN   R30,0x10
0000a4 72e0      	ANDI R30,LOW(0x20)
0000a5 e0f0      	LDI  R31,0
0000a6 95f5      	ASR  R31
0000a7 95e7      	ROR  R30
0000a8 940e 00ed 	CALL __ASRW4
0000aa 2f0e      	MOV  R16,R30
                 ; 0000 0061         output_gate3 = (PINA & (1 << PORTA3)) >> PORTA3;
0000ab b3e9      	IN   R30,0x19
0000ac 70e8      	ANDI R30,LOW(0x8)
0000ad e0f0      	LDI  R31,0
0000ae 940e 00ef 	CALL __ASRW3
0000b0 2f3e      	MOV  R19,R30
                 ; 0000 0062         output_gate4 = (PINA & (1 << PORTA6)) >> PORTA6;
0000b1 b3e9      	IN   R30,0x19
0000b2 74e0      	ANDI R30,LOW(0x40)
0000b3 e0f0      	LDI  R31,0
0000b4 940e 00f1 	CALL __ASRW2
0000b6 940e 00ed 	CALL __ASRW4
0000b8 2f2e      	MOV  R18,R30
                 ; 0000 0063 
                 ; 0000 0064         // Calculate expected outputs for each gate
                 ; 0000 0065         expected_output = (inputs & 0x01) && ((inputs >> 1) & 0x01);
0000b9 81e8      	LD   R30,Y
0000ba 70e1      	ANDI R30,LOW(0x1)
0000bb f041      	BREQ _0xA
0000bc 81e8      	LD   R30,Y
0000bd e0f0      	LDI  R31,0
0000be 95f5      	ASR  R31
0000bf 95e7      	ROR  R30
0000c0 70e1      	ANDI R30,LOW(0x1)
0000c1 f011      	BREQ _0xA
0000c2 e0e1      	LDI  R30,1
0000c3 c001      	RJMP _0xB
                 _0xA:
0000c4 e0e0      	LDI  R30,0
                 _0xB:
0000c5 2f5e      	MOV  R21,R30
                 ; 0000 0066 
                 ; 0000 0067         // Verify each gate's output
                 ; 0000 0068         if (output_gate1 != expected_output) return 0;
0000c6 1751      	CP   R21,R17
0000c7 f019      	BREQ _0xC
0000c8 e0e0      	LDI  R30,LOW(0)
0000c9 9621      	ADIW R28,1
0000ca c013      	RJMP _0x2000001
                 ; 0000 0069         if (output_gate2 != expected_output) return 0;
                 _0xC:
0000cb 1750      	CP   R21,R16
0000cc f019      	BREQ _0xD
0000cd e0e0      	LDI  R30,LOW(0)
0000ce 9621      	ADIW R28,1
0000cf c00e      	RJMP _0x2000001
                 ; 0000 006A         if (output_gate3 != expected_output) return 0;
                 _0xD:
0000d0 1753      	CP   R21,R19
0000d1 f019      	BREQ _0xE
0000d2 e0e0      	LDI  R30,LOW(0)
0000d3 9621      	ADIW R28,1
0000d4 c009      	RJMP _0x2000001
                 ; 0000 006B         if (output_gate4 != expected_output) return 0;
                 _0xE:
0000d5 1752      	CP   R21,R18
0000d6 f019      	BREQ _0xF
0000d7 e0e0      	LDI  R30,LOW(0)
0000d8 9621      	ADIW R28,1
0000d9 c004      	RJMP _0x2000001
                 ; 0000 006C     }
                 _0xF:
0000da 9621      	ADIW R28,1
0000db 5f4f      	SUBI R20,-1
0000dc cfa2      	RJMP _0x8
                 _0x9:
                 ; 0000 006D 
                 ; 0000 006E     return 1; // Test passed
0000dd e0e1      	LDI  R30,LOW(1)
                 _0x2000001:
0000de 940e 00fd 	CALL __LOADLOCR6
0000e0 962a      	ADIW R28,10
0000e1 9508      	RET
                 ; 0000 006F }
                 ; .FEND
                 ;
                 ;void display_result(unsigned char result) {
                 ; 0000 0071 void display_result(unsigned char result) {
                 _display_result:
                 ; .FSTART _display_result
                 ; 0000 0072     if (result) {
0000e2 93aa      	ST   -Y,R26
                 ;	result -> Y+0
0000e3 81e8      	LD   R30,Y
0000e4 30e0      	CPI  R30,0
0000e5 f019      	BREQ _0x10
                 ; 0000 0073         PORTC |= (1 << LED_PASS);  // Light up pass LED
0000e6 9aa8      	SBI  0x15,0
                 ; 0000 0074         PORTC &= ~(1 << LED_FAIL); // Turn off fail LED
0000e7 98a9      	CBI  0x15,1
                 ; 0000 0075     } else {
0000e8 c002      	RJMP _0x11
                 _0x10:
                 ; 0000 0076         PORTC |= (1 << LED_FAIL);  // Light up fail LED
0000e9 9aa9      	SBI  0x15,1
                 ; 0000 0077         PORTC &= ~(1 << LED_PASS); // Turn off pass LED
0000ea 98a8      	CBI  0x15,0
                 ; 0000 0078     }
                 _0x11:
                 ; 0000 0079 }
0000eb 9621      	ADIW R28,1
0000ec 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 __ASRW4:
0000ed 95f5      	ASR  R31
0000ee 95e7      	ROR  R30
                 __ASRW3:
0000ef 95f5      	ASR  R31
0000f0 95e7      	ROR  R30
                 __ASRW2:
0000f1 95f5      	ASR  R31
0000f2 95e7      	ROR  R30
0000f3 95f5      	ASR  R31
0000f4 95e7      	ROR  R30
0000f5 9508      	RET
                 
                 __SAVELOCR6:
0000f6 935a      	ST   -Y,R21
                 __SAVELOCR5:
0000f7 934a      	ST   -Y,R20
                 __SAVELOCR4:
0000f8 933a      	ST   -Y,R19
                 __SAVELOCR3:
0000f9 932a      	ST   -Y,R18
                 __SAVELOCR2:
0000fa 931a      	ST   -Y,R17
0000fb 930a      	ST   -Y,R16
0000fc 9508      	RET
                 
                 __LOADLOCR6:
0000fd 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0000fe 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0000ff 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000100 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000101 8119      	LDD  R17,Y+1
000102 8108      	LD   R16,Y
000103 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32A register use summary:
r0 :   0 r1 :   0 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   4 r17:   6 r18:   4 r19:   4 r20:   7 r21:   7 r22:   0 r23:   0 
r24:   6 r25:   1 r26:  11 r27:   2 r28:  11 r29:   1 r30:  99 r31:  15 
x  :   3 y  :  23 z  :   0 
Registers used: 16 out of 35 (45.7%)

ATmega32A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   1 
adiw  :   8 and   :   0 andi  :  17 asr   :   6 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   7 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   0 brmi  :   0 brne  :   3 brpl  :   0 brsh  :   0 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   7 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   2 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   4 cpc   :   0 cpi   :   2 cpse  :   0 dec   :   2 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :  16 inc   :   0 jmp   :  22 ld    :   7 ldd   :   5 ldi   :  30 
lds   :   0 lpm   :   0 lsl   :   1 lsr   :   0 mov   :  10 movw  :   1 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   2 
ori   :   3 out   :  17 pop   :   0 push  :   0 rcall :   4 ret   :   7 
reti  :   0 rjmp  :  10 rol   :   0 ror   :   6 sbc   :   0 sbci  :   0 
sbi   :   5 sbic  :   0 sbis  :   0 sbiw  :   3 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  11 std   :   3 sts   :   0 sub   :   0 subi  :   1 swap  :   0 
tst   :   0 wdr   :   0 
Instructions used: 35 out of 116 (30.2%)

ATmega32A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000208    520      0    520   32768   1.6%
[.dseg] 0x000060 0x000260      0      0      0    2048   0.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings
